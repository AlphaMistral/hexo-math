// Generated by CoffeeScript 1.6.3
var Command, Layout, Log, async, check, colors, file, inject, layoutDir, list, load, log, remove, themeDir, yesOrNo;

colors = require('colors');

Log = require('./Log');

Layout = require('./Layout');

async = require('async');

log = new Log();

file = hexo.file;

themeDir = hexo.theme_dir;

layoutDir = themeDir + "layout\\";

yesOrNo = function(b) {
  var answer;
  answer = b ? "YES".green : "NO".red;
  return "" + "[".bold + answer + "]".bold;
};

load = function(files, callback) {
  var makeTask, tasks;
  tasks = [];
  makeTask = function(path) {
    return function(cb) {
      var layout;
      layout = new Layout(path);
      return layout.load(cb);
    };
  };
  files.forEach(function(f) {
    var fullPath;
    fullPath = layoutDir + f;
    return tasks.push(makeTask(fullPath));
  });
  return async.parallel(tasks, function(err, results) {
    var heads;
    if (err != null) {
      if (typeof next === "function") {
        next(err);
      }
    }
    log.info("Load " + results.length + " layout files");
    heads = results.filter(function(l) {
      return l.hasHead;
    });
    log.info("Found " + heads.length + " with <head>");
    return typeof callback === "function" ? callback(null, heads) : void 0;
  });
};

list = function(next) {
  log.info("Layout folder: " + layoutDir);
  return file.list(layoutDir, null, function(err, files) {
    if (err != null) {
      if (typeof next === "function") {
        next(err);
      }
    }
    files = files.filter(function(f) {
      return f.match(".*?\.ejs$");
    });
    log.info("Found " + files.length + " layout files");
    return typeof next === "function" ? next(null, files) : void 0;
  });
};

check = function(layouts, next) {
  var deployed, mathjax;
  mathjax = layouts.filter(function(f) {
    return f.match(".*?math-jax.ejs$");
  });
  deployed = mathjax.length !== 0;
  log.info("Layout math-jax.ejs deployed .......... " + (yesOrNo(deployed)));
  return load(layouts, function(err, headLayouts) {
    var i, injected, layout, _i, _len;
    if (err != null) {
      if (typeof next === "function") {
        next(err);
      }
      return;
    }
    injected = true;
    for (i = _i = 0, _len = headLayouts.length; _i < _len; i = ++_i) {
      layout = headLayouts[i];
      log.info("Injected " + (i + 1) + " of " + headLayouts.length + " .......... " + (yesOrNo(layout.injected)));
      if (!layout.injected) {
        injected = false;
      }
    }
    return typeof next === "function" ? next(null, {
      deployed: deployed,
      layouts: headLayouts,
      injected: injected
    }) : void 0;
  });
};

inject = function(payload, next) {
  if (payload.deployed && payload.injected) {
    log.info("Already installed.");
    if (typeof next === "function") {
      next(null, payload);
    }
    return;
  }
  return console.log("Do install stuff");
};

remove = function(payload, next) {
  if (!payload.deployed || !payload.injected) {
    log.info("Not installed.");
    if (typeof next === "function") {
      next(null, payload);
    }
    return;
  }
  return console.log("Do uninstall stuff");
};

module.exports = Command = (function() {
  function Command(callback) {
    this.callback = callback;
  }

  Command.prototype.execute = function(opt) {
    var handler;
    handler = this[opt];
    if (handler != null) {
      return handler();
    } else {
      log.error("Unknown command: " + opt);
      return hexo.call('help', {
        _: ['math']
      }, this.callback);
    }
  };

  Command.prototype.install = function() {
    return async.waterfall([list, check, inject], function(err, result) {
      if (err != null) {
        return log.error(err);
      } else {
        return log.info("Done!");
      }
    });
  };

  Command.prototype.uninstall = function() {
    return async.waterfall([list, check, remove], function(err, result) {
      if (err != null) {
        return log.error(err);
      } else {
        return log.info("Done!");
      }
    });
  };

  return Command;

})();

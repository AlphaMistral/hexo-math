// Generated by CoffeeScript 1.6.3
var Layout, async, extend, file, headTag, inject, makeLoaderCallback, util;

extend = hexo.extend;

util = hexo.util;

file = hexo.file;

async = require('async');

headTag = "</head>";

inject = "<%- partial('math-jax')%>";

makeLoaderCallback = function(source, callback) {
  return function(err, src) {
    if (err != null) {
      return callback(err);
    }
    if (src == null) {
      return callback(new Error("Null source."));
    }
    source.src = src;
    source.hasHead = src.indexOf(headTag) >= 0;
    source.injected = src.indexOf(inject) >= 0;
    return callback(null, source);
  };
};

module.exports = Layout = (function() {
  function Layout(path) {
    this.path = path;
    this.src = "";
    this.images = [];
    this.hasHead = false;
    this.injected = false;
  }

  Layout.prototype.load = function(callback) {
    return file.readFile(this.path, null, makeLoaderCallback(this, callback));
  };

  Layout.prototype.update = function(callback) {
    var d, img, newSrc, r, timestamp, _i, _len, _ref,
      _this = this;
    newSrc = this.src;
    _ref = this.images;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      img = _ref[_i];
      r = new RegExp(escapeRegExp(img.url, "g"));
      newSrc = newSrc.replace(r, "{{BASE_PATH}}/images/" + img.localPath);
    }
    d = new Date();
    timestamp = d.toISOString().replace(/:/g, "-");
    return file.writeFile("" + this.path + "." + timestamp + ".bak", this.src, function(err) {
      if (err != null) {
        console.log("Fail to backup " + _this.path);
      }
      return file.writeFile(_this.path, newSrc, function(err) {
        if (err != null) {
          return typeof callback === "function" ? callback(err, this) : void 0;
        } else {
          return typeof callback === "function" ? callback(null, this) : void 0;
        }
      });
    });
  };

  return Layout;

})();
